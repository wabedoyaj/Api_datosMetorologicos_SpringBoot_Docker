version: '3.8'

services:
  api_meteorologica:
    build: .
    ports:
      - "9090:9090"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/weatherdb?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
      SPRING_DATASOURCE_USERNAME: myuser
      SPRING_DATASOURCE_PASSWORD: mypassword
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
    restart: always
    networks:
      - api_meteorologica_api_network

  db:
    image: mysql:8
    container_name: api_meteorologica-db
    restart: always
    environment:
        MYSQL_ROOT_PASSWORD: root  # Solo usa esta línea para el usuario root
        MYSQL_DATABASE: weatherdb
        MYSQL_USER: myuser  # Cambia esto a un usuario que no sea root
        MYSQL_PASSWORD: mypassword  # Establece una contraseña segura
        command: --default-authentication-plugin=mysql_native_password
    ports:
      - "3308:3306"
    volumes:
      - api_meteorologica_mysql_data:/var/lib/mysql # Aquí se guardarán los datos de MySQL
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      retries: 5
      start_period: 30s
    networks:
      - api_meteorologica_api_network
  redis:
    image: redis:latest
    container_name: api_meteorologica-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - api_meteorologica_api_network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      retries: 5
      start_period: 30s

volumes:
  api_meteorologica_mysql_data:  # Volumen para que MySQL conserve los datos

networks:
  api_meteorologica_api_network:
    driver: bridge
